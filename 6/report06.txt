課題２
class Student
{
    int gakunen;
    String bunnya;
    String namae;
    String jukyo;

    Student(int gakunen, String bunnya, String namae, String jukyo) {
        this.gakunen = gakunen;
        this.bunnya = bunnya;
        this.namae = namae;
        this.jukyo = jukyo;
    }

    void shokai() {
        System.out.println("私は"+ this.gakunen + "年" + this.bunnya + "の" + this.namae + "です。私の住居は" + this.jukyo + "です。" );
    }

    static void shokai(Student a) {
        System.out.println("私は"+ a.gakunen + "年" + a.bunnya + "の" + a.namae + "さんです。私の住居は" + a.jukyo + "です。");
    }
}

class StudentApp {
    public static void main(String[] args) 
    {
        Student jotaro = new Student(4, "情報", "じょうたろう", "下宿");
        Student josuke = new Student(3, "情報", "じょうすけ", "学寮");
        jotaro.shokai();
        josuke.shokai();
        Student.shokai(jotaro);
        Student.shokai(josuke);

        System.exit(0);
    }
}

実行結果：
$ java StudentApp 
私は4年情報のじょうたろうです。私の住居は下宿です。
私は3年情報のじょうすけです。私の住居は学寮です。
私は4年情報のじょうたろうさんです。私の住居は下宿です。
私は3年情報のじょうすけさんです。私の住居は学寮です。


課題３
void hantei(Student a) {
    if(this.jukyo.equals(a.jukyo)) {
        System.out.println("私"+ this.namae + "と" + a.namae + "さんは仲間です.");
    } else 
    {
        System.out.println("私"+ this.namae + "と" + a.namae + "さんは仲間ではありません.");
    }
}

static void hantei(Student a, Student b){
if(a.jukyo.equals(b.jukyo)) {
    System.out.println(a.namae + "さんと" + b.namae + "さんは仲間です. \n");
    } else 
    {
        System.out.println(a.namae + "さんと" + b.namae + "さんは仲間ではありません. \n");
    }
}

Student josuke = new Student(3, "情報", "じょうすけ", "学寮");

josuke.hantei(jotaro);
Student.hantei(josuke, jotaro);

kikaitaro.shokai();

kikaitaro.hantei(josuke);
Student.hantei(kikaitaro, josuke);

実行結果：
$ java StudentApp 
私は4年情報のじょうたろうです。私の住居は下宿です。

私は3年情報のじょうすけです。私の住居は学寮です。

私じょうすけとじょうたろうさんは仲間ではありません.
じょうすけさんとじょうたろうさんは仲間ではありません. 

私は3年機械のきかいたろうです。私の住居は学寮です。

私きかいたろうとじょうすけさんは仲間です.
きかいたろうさんとじょうすけさんは仲間です. 

通常版とstatic版の動作の違い：
通常版ではmainからhanteiメソッドが呼び出されると, 「主」インスタンスと「従」インスタンスの, jukyoフィールドの値が比較される. 
一方static版では「主」と「従」の関係がない。２つの引数としてオブジェクト変数を扱い、一つめの引数のjukyoフィルドと２つめの引数のjukyoフィルド比較される。

課題４
void shinkyu(){
    this.gakunen ++;
    System.out.println("私は" + (this.gakunen) + "年に進級しました!");
}

static void shinkyu(Student a){
    a.gakunen ++;
    System.out.println(a.namae + "さんは" + (a.gakunen) + "年に進級しました!");
}

jotaro.shinkyu();
jotaro.shokai();

Student.shinkyu(josuke);
Student.shokai(josuke);

実行結果：
$ java StudentApp 
私は4年情報のじょうたろうです。私の住居は下宿です。

私は3年情報のじょうすけです。私の住居は学寮です。

私は5年に進級しました!
私は5年情報のじょうたろうです。私の住居は下宿です。

じょうすけさんは4年に進級しました!
私は4年情報のじょうすけさんです。私の住居は学寮です。

通常版とstatic版の動作の違い：
通常版ではmainからshinkyuメソッドが呼び出されると, オブジェクト変数のgakunenフィールドの値が変更させる. 
一方static版では１つの引数としてオブジェクト変数を扱い、引数のgakunenフィルドの値が変更される。


課題５
class Player {
    String name;
    int hp;
    int att;
    int lvl;
    int basehp;

    Player(String name, int hp, int att, int lvl) {
        this.name = name;
        this.hp = hp;
        this.basehp = hp;
        this.att = att;
        this.lvl = lvl;
    }

    void status() {
        System.out.println(
            this.name + " status :" +
            "\nlvl : " + this.lvl +            
            "\nhp  : " + this.hp +
            "\natt : " + this.att + "\n"
            );
    }

    void attack(Player a) {
        if(a.hp - this.att > 0) {
            a.hp -= this.att;
        } else {
            a.hp = 0;
        }
        System.out.println(a.name + " is attacked by " + this.name + ". Damage : " + this.att + "\n");
    }

    void restoreHp() {
        this.hp = this.basehp;
    }

    void lvlUp() {
        System.out.println(this.name + " leveled up!");
        restoreHp();
        this.lvl ++;
        this.hp += 5*lvl;
        this.basehp = this.hp;
        this.att += 3*lvl;
    }
}

class Game {

    static void win(Player a, Player b) {
        if(a.hp == 0) {
            System.out.println(b.name + " win!");
            b.lvlUp();
            b.status();
        } else if(b.hp == 0) {
            System.out.println(a.name + " win!");
            a.lvlUp();
            a.status();
        }
    }
    
    static void startGame(Player a, Player b){
        int turn = 1;
        a.status();
        b.status();
        while(a.hp > 0 && b.hp > 0) {
            System.out.println("Turn " + turn + "------------");
            if(turn % 2 == 1){
                a.attack(b);
            }
            else {
                b.attack(a);
            }
            turn ++;
            a.status();
            b.status();
            System.out.println("End turn ----------\n\n");
        }

        Game.win(a,b);
    }

}

class GameSimple{
    public static void main(String[] args) {
        Player player1 = new Player("Player1", 10, 6, 1);
        Player player2 = new Player("Player2", 10, 4, 1);

        Game.startGame(player1, player2);

        System.exit(0);
    }
}

実行結果：
Player1 status :
lvl : 1
hp  : 10
att : 6

Player2 status :
lvl : 1
hp  : 10
att : 4

Turn 1------------
Player2 is attacked by Player1. Damage : 6

Player1 status :
lvl : 1
hp  : 10
att : 6

Player2 status :
lvl : 1
hp  : 4
att : 4

End turn ----------


Turn 2------------
Player1 is attacked by Player2. Damage : 4

Player1 status :
lvl : 1
hp  : 6
att : 6

Player2 status :
lvl : 1
hp  : 4
att : 4

End turn ----------


Turn 3------------
Player2 is attacked by Player1. Damage : 6

Player1 status :
lvl : 1
hp  : 6
att : 6

Player2 status :
lvl : 1
hp  : 0
att : 4

End turn ----------


Player1 win!
Player1 leveled up!
Player1 status :
lvl : 2
hp  : 20
att : 12

説明：

シンプルなターンベースの戦いゲームのようなである。
ゲームのシステムはプレーヤーが順番に攻撃して、最後に生き残るプレーヤーは勝つ。
勝ったプレーヤーのレベルが上がることにする。

「Player」クラスのフィールドはプレーヤーの属性として扱われている。
「status」メソッドはプレーヤーのステータスを表示する。
「attack」メソッドは他の相手を攻撃する。攻撃するときは相手の「hp」フィールドがプレーヤーの「att」フィールドと引くことにする。もし相手の「hp」は０より大きかったら、そのままにする。一方、相手の「hp」は０より小さかったら、相手の「hp」は０になる。
「restoreHp」メソッドはプレーヤーの「hp」を元の「basehp」に戻す。
「lvlUp」メソッドはプレーヤーの「lvl」フィールドの値を上げるメソッドである。プレーヤーの他のフィールドの値も上げる。ただし、最初は「restoreHP」メソッドによるプレーヤーの「hp」を元の「basehp」に戻す。

「Game」クラスはこのゲームがどのように動作するかを決定するものである。フィールド無で、いくつメソッドを扱う。
「startGame」メソッドはゲームの動作を決定する。まずターンを１に設定する。ゲームは何れかプレーヤーが「hp」を０になるまで続く。最後に「win」メソッドを呼び出される。
「win」メソッドは誰かが勝つを判定するメソッド。このメソッドの中に勝ったプレーヤーの「lvlUp」と「status」メソッドを呼び出される。

「GameSimple」クラスにmainメソッドがある。
「main」メソッドにまず二つオブジェクト変数を定義する。そして、ゲームを始めるために「gameStart」メソッドを呼び出す。