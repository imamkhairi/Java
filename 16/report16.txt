4J 08 イマムカイリルビス　テーマ16　レポート

課題１
import javax.swing.*;

public class AppFrame1 extends JFrame {
    private AppPanel1 drawPanel;
    
    public AppFrame1() {
        super();

        this.drawPanel = new AppPanel1();

        JPanel basePanel = new JPanel();
        basePanel.add(this.drawPanel);

        this.getContentPane().add(basePanel);
        this.pack();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
    
    public static void main(String[] args) {
        new AppFrame1();
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class AppPanel1 extends JPanel implements MouseListener{
    private Dimension windowSize = new Dimension(500,500);
    
    public AppPanel1() {
        this.setPreferredSize(this.windowSize);
        this.setBackground(Color.BLACK);
        this.addMouseListener(this);
    }


    @Override
    public void mousePressed(MouseEvent e) { 
        Graphics g = this.getGraphics();
        Graphics2D g2 = (Graphics2D)g;
        int r = 10;
        g2.setColor(new Color((int)Math.round(Math.random()*255),(int)Math.round(Math.random()*255),(int)Math.round(Math.random()*255)));
        int type = (int)Math.round(Math.random()*2);
        switch (type) {
            case 0:
                g2.fillOval(e.getX()-r, e.getY()-r, 2*r,2*r);
                break;
            case 1:
                g2.fillRect(e.getX()-r, e.getY()-r, 2*r, 2*r);
                break;
            case 2:
                g2.fillRoundRect(e.getX()-r, e.getY()-r, 2*r, 2*r, 9, 9);
                break;
            default:
                System.out.println("Type input error");
                break;
        }
    }  
    
    @Override
    public void mouseReleased(MouseEvent e) { }
    
    @Override
    public void mouseClicked(MouseEvent e) { }
    
    @Override
    public void mouseEntered(MouseEvent e) { }
    
    @Override
    public void mouseExited(MouseEvent e) { }
}


課題２
import javax.swing.*;

public class AppFrame2 extends JFrame {
    private AppPanel2 drawPanel;
    
    public AppFrame2() {
        super();

        this.drawPanel = new AppPanel2();

        JPanel basePanel = new JPanel();
        basePanel.add(this.drawPanel);

        this.getContentPane().add(basePanel);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);

        System.out.println(this.getContentPane().getSize());
    }
    
    public static void main(String[] args) {
        new AppFrame2();
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class AppPanel2 extends JPanel implements MouseMotionListener, MouseListener{
    private Dimension windowSize = new Dimension(500,500);
    private int oldX, oldY;
    
    public AppPanel2() {
        this.setPreferredSize(this.windowSize);
        this.setBackground(Color.BLACK);
        this.addMouseMotionListener(this);
        this.addMouseListener(this);
    }

    private void savePoint(MouseEvent e) {
        this.oldX = e.getX();
        this.oldY = e.getY();
    }

    @Override
    public void mousePressed(MouseEvent e) { 
        this.savePoint(e);
    }  
    
    @Override
    public void mouseReleased(MouseEvent e) { }
    
    @Override
    public void mouseClicked(MouseEvent e) { }
    
    @Override
    public void mouseEntered(MouseEvent e) { }
    
    @Override
    public void mouseExited(MouseEvent e) {
        Graphics g = this.getGraphics();
        Graphics2D g2 = (Graphics2D)g;
        g2.setColor(Color.BLACK);
        g2.fillRect(0, 0, (int)(this.windowSize.getWidth()), (int)(this.windowSize.getHeight()));
    }
    
    @Override
    public void mouseMoved(MouseEvent e) {}

    @Override
    public void mouseDragged(MouseEvent e) {
        Graphics g = this.getGraphics();
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(Color.WHITE);
        
        g2.setStroke(new BasicStroke(10, BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        g2.drawLine(this.oldX, this.oldY, e.getX(), e.getY());
        this.savePoint(e);
    }

}

使用方法：
パネル上でマウスをドラッグすると、線が表示される。
カーソルがフレームから離れると、パネルがリセットされる。


課題３
プログラムの修正箇所:
レイキャスティングのシミュレーションをするために、課題２のプログラムを全体的に変更した。
3つの新しいクラスを追加した。
パネルに直接描画するのではなく、バッファに画像に描画する。


修正内容：
Boundary : 壁のようなものを作り、光を通さないようにする。
Ray : 光のような線を作る。
LightSource :　全方位に光を発する光源として機能した。
マウスをドラッグすると、光源が全方位に発光し、壁にぶつかると光を通さないようにした。
マウスを離すと、光源は発光を停止する。
paintComponentメソッドにBufferedImageを表示すると、描画されたものを表示することができる。


ソース：
import javax.swing.*;

public class MyFrame extends JFrame {
    private MyPanel drawPanel;
    
    public MyFrame() {
        super();

        this.drawPanel = new MyPanel();

        JPanel basePanel = new JPanel();
        basePanel.add(this.drawPanel);

        this.getContentPane().add(basePanel);
        this.pack();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);        
        this.setVisible(true);
        this.setResizable(false);
    }

    public static void main(String[] args) {
        new MyFrame();
    }
}

import javax.swing.JPanel;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;

public class MyPanel extends JPanel implements MouseListener, MouseMotionListener{
    private Dimension dimension = new Dimension(700,700);
    private BufferedImage bi;
    private Boundary[] walls;
    private LightSource source;
    private Graphics bufGraphics;

    public MyPanel() {
        this.bi = new BufferedImage((int)(this.dimension.getWidth()), (int)(this.dimension.getHeight()), BufferedImage.TYPE_INT_ARGB);
        this.bufGraphics = this.bi.getGraphics();
        
        this.walls = new Boundary[5+4];
        for(int i = 0; i < this.walls.length; i++){
            int x1 = (int)(Math.random()*this.dimension.getWidth());
            int y1 = (int)(Math.random()*this.dimension.getHeight());
            int x2 = (int)(Math.random()*this.dimension.getWidth());
            int y2 = (int)(Math.random()*this.dimension.getHeight());
            this.walls[i] = new Boundary(new Point(x1, y1), new Point(x2,y2));
        }

        this.walls[5] = new Boundary(new Point(0,0), new Point(700, 0));
        this.walls[6] = new Boundary(new Point(700,0), new Point(700, 700));
        this.walls[7] = new Boundary(new Point(700,700), new Point(0, 700));
        this.walls[8] = new Boundary(new Point(0,700), new Point(0, 0));

        this.source = new LightSource();

        this.setPreferredSize(this.dimension);
        this.setBackground(new Color(0,0,0));

        this.addMouseListener(this);
        this.addMouseMotionListener(this);
    }

    private Graphics2D convTo2D(Graphics g) {
        return (Graphics2D)g;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        this.source.updPosition(e.getX(), e.getY());
        this.source.show(this.convTo2D(this.bufGraphics));
        this.source.cast(this.walls, this.convTo2D(this.bufGraphics));
        this.repaint();
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        this.bufGraphics.setColor(Color.BLACK);
        this.bufGraphics.fillRect(0, 0, (int)this.dimension.getWidth(), (int)this.dimension.getWidth());
        this.repaint();
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        this.bufGraphics.setColor(Color.BLACK);
        this.bufGraphics.fillRect(0, 0, (int)this.dimension.getWidth(), (int)this.dimension.getWidth());

        this.source.updPosition(e.getX(), e.getY());
        this.source.show(this.convTo2D(this.bufGraphics));
        this.source.cast(this.walls, this.convTo2D(this.bufGraphics));

        this.repaint();    
    }
    
    @Override
    public void mouseMoved(MouseEvent e) { }
    
    public void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        for(int i = 0; i < this.walls.length; i ++) {
            this.walls[i].show(this.convTo2D(this.bufGraphics));
        }
        super.paintComponent(g2);
        g2.drawImage(this.bi, null, 0, 0);
    }
}

import java.awt.*;

public class Boundary {
    private Point start;
    private Point end;

    public Boundary(Point start, Point end) {
        this.start = start;
        this.end = end;
    }

    public void show(Graphics2D g2) {
        g2.setColor(new Color(255, 255, 255));
        g2.setStroke(new BasicStroke(2));
        g2.drawLine(getX1(), getY1(), getX2(), getY2());
    }

    public int getX1() {
        return (int)this.start.getX();
    }
    public int getY1() {
        return (int)this.start.getY();
    }
    public int getX2() {
        return (int)this.end.getX();
    }
    public int getY2() {
        return (int)this.end.getY();
    }
}

import java.awt.*;
import java.awt.event.*;

public class Ray {
    private Point start;
    private Point dir;

    public Ray(Point start, Point dir) {
        this.start = start;
        this.dir = dir;
    }

    public void showBase(Graphics2D g2, MouseEvent e) {
        int r = 12;
        g2.setColor(Color.WHITE);
        g2.fillOval(e.getX()-r, e.getY()-r, r*2, r*2);
    }

    public void showRay(Graphics2D g2) {
        g2.setColor(new Color(255,255,255,50));
        g2.setStroke(new BasicStroke(1));
        g2.drawLine(this.getX1(), this.getY1(), this.getX1() + this.getX2(), this.getY1() + this.getY2());
    }

    public Point castLight(Boundary b) {
        int x1 = b.getX1();
        int y1 = b.getY1();
        int x2 = b.getX2();
        int y2 = b.getY2();

        int x3 = this.getX1();
        int y3 = this.getY1();
        int x4 = this.getX1() + this.getX2();
        int y4 = this.getY1() + this.getY2();

        double den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
        if(den == 0) {
            return null;
        }

        double t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;
        double u = ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) / den;

        if(t > 0 && t < 1 && u > 0) {
            Point castingResult = new Point();
            castingResult.x = (int)(x1 + t * (x2-x1));
            castingResult.y = (int)(y1 + t * (y2-y1));
            return castingResult;
        } else {
            return null;
        }

    }

    public int getX1() {
        return (int)this.start.getX();
    }
    public int getY1() {
        return (int)this.start.getY();
    }
    public int getX2() {
        return (int)this.dir.getX();
    }
    public int getY2() {
        return (int)this.dir.getY();
    }

    public void setDir(int x, int y) {
        this.dir.x = x - this.start.x;
        this.dir.y = y - this.start.y;
        double length = this.vectorLenght(this.start.x, this.start.y, x, y);
    }

    private double vectorLenght(int x1, int y1, int x2, int y2) {
        double dx = x1-x2;
        double dy = y1-y2;
        double sqrt = Math.sqrt(dx*dx + dy*dy);
        return sqrt;
    }

    private void normalizeDir(double length) {
        this.dir.x = Math.round((float)(this.dir.x / length)) *10;
        this.dir.y = Math.round((float)(this.dir.y / length)) *10;
    }
}

import java.awt.*;

public class LightSource {
    private Point center;
    private Ray[] rays;

    public LightSource() {
        this.center = new Point(350, 350);
        int divider = 3;
        this.rays = new Ray[360/divider];

        for(int i = 0; i < 360; i+= divider) {
            int x = (int)Math.round(Math.cos(Math.toRadians((double)i))*5);
            int y = (int)Math.round(Math.sin(Math.toRadians((double)i))*5);
            this.rays[i/divider] = new Ray(this.center, new Point(x,y));
        }
    }

    public void show(Graphics2D g2) {
        for(int i = 0; i < this.rays.length; i++) {
            rays[i].showRay(g2);
        }
    }

    public void cast(Boundary[] walls, Graphics2D g2) {
        g2.setColor(new Color(255,255,255,50));
        for(int i = 0; i < this.rays.length; i++) {
            Point closest = null; 
            int record = (int)(750*Math.sqrt((double)2)); //window diagonal size
            for(int j = 0; j < walls.length; j ++) {
                Point pt = rays[i].castLight(walls[j]);
                if(pt != null) {
                    int d = (int)Math.round(this.calcDist(this.center.x, this.center.y, pt.x, pt.y));
                    if(d < record) {
                        record = d;
                        closest = pt;
                    }
                }
            }
            if(closest != null) {
                g2.drawLine(this.center.x, this.center.y, closest.x, closest.y);
            }
        }
    }

    private double calcDist(int x1, int y1, int x2, int y2) {
        double dx = x1-x2;
        double dy = y1-y2;
        double sqrt = Math.sqrt(dx*dx + dy*dy);
        return sqrt;
    }
    public void updPosition(int x, int y) {
        this.center.x = x;
        this.center.y = y;
    }
}


https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
https://ncase.me/sight-and-light/
https://www.redblobgames.com/articles/visibility/
https://docs.oracle.com/javase/jp/8/docs/api/java/awt/Graphics.html